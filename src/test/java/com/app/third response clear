revised addition logic

public void addRelatedEntitiesToDossier(String dossierId, String consumerId, String traceId, List<RelatedEntity> incomingRelatedEntities) throws Exception {
    // Step 1: Fetch all documents in the dossier
    List<DocumentInDossier> allDocumentsList = getAllDocumentsService
        .getAllDocuments(consumerId, dossierId, traceId)
        .getDocumentInDossiers();

    // Step 2: Read existing related entities in the dossier
    List<RelatedEntity> existingDossierRelatedEntities = relatedEntityNuxeoHandler
        .readRelatedEntityInfo(dossierMetadataService.getDossierMetadata(dossierId, consumerId, traceId));

    // Step 3: Normalize incoming related entities
    List<RelatedEntity> normalizedIncomingEntities = incomingRelatedEntities.stream()
        .map(entity -> new RelatedEntity(
            entity.getId(),
            entity.getAdministrationId(),
            entity.getType().toUpperCase(Locale.ENGLISH)))
        .collect(Collectors.toList());

    // Step 4: Initialize document update data
    List<Map<String, List<RelatedEntity>>> docUpdateData = new ArrayList<>();

    // Step 5: Check if dossier and documents have existing RE
    if (existingDossierRelatedEntities.isEmpty() && allDocumentsList.isEmpty()) {
        // Case 1: No RE in the dossier or its documents
        log.info("No existing RE found, adding incoming RE to the dossier and all its documents.");

        // Prepare a single update for all documents
        Map<String, List<RelatedEntity>> allDocumentsUpdate = new HashMap<>();
        for (DocumentInDossier document : allDocumentsList) {
            allDocumentsUpdate.put(document.getId(), normalizedIncomingEntities);
        }
        docUpdateData.add(allDocumentsUpdate);

        // Update documents and dossier
        performDocumentAndDossierUpdates(docUpdateData, dossierId, normalizedIncomingEntities, traceId);
        return;
    }

    // Case 2: Check documents for RE and gather updates
    for (DocumentInDossier document : allDocumentsList) {
        List<RelatedEntity> existingDocumentEntities = document.getRelatedEntityInfo().stream()
            .map(entity -> new RelatedEntity(
                entity.getId(),
                entity.getAdministrationId(),
                entity.getType().toUpperCase(Locale.ENGLISH)))
            .collect(Collectors.toList());

        // Find new RE to add
        List<RelatedEntity> entitiesToAdd = normalizedIncomingEntities.stream()
            .filter(incomingEntity -> existingDocumentEntities.stream().noneMatch(existingEntity ->
                existingEntity.getAdministrationId().equals(incomingEntity.getAdministrationId()) &&
                existingEntity.getId().equals(incomingEntity.getId()) &&
                existingEntity.getType().equals(incomingEntity.getType())))
            .collect(Collectors.toList());

        // If new RE found, prepare update data for this document
        if (!entitiesToAdd.isEmpty()) {
            Map<String, List<RelatedEntity>> documentData = new HashMap<>();
            documentData.put(document.getId(), entitiesToAdd);
            docUpdateData.add(documentData);
        }
    }

    // Perform updates if required
    if (!docUpdateData.isEmpty()) {
        performDocumentAndDossierUpdates(docUpdateData, dossierId, normalizedIncomingEntities, traceId);
    } else {
        log.info("No new related entities to add. All documents already have the provided RE.");
    }
}

/**
 * Handles the API call to update documents and then the dossier.
 */
private void performDocumentAndDossierUpdates(
        List<Map<String, List<RelatedEntity>>> docUpdateData,
        String dossierId,
        List<RelatedEntity> relatedEntities,
        String traceId) throws Exception {
    // Step 1: Call Document API
    boolean allDocumentsUpdated = callDocumentAPI(docUpdateData, traceId);

    if (!allDocumentsUpdated) {
        throw new Exception("Failed to update related entities in some documents. Operation aborted.");
    }

    // Step 2: Update dossier after successful document updates
    updateDossierWithNewEntities(dossierId, relatedEntities);
}
+---------------
 document apilogic


private boolean callDocumentAPI(List<Map<String, List<RelatedEntity>>> docUpdateData, String traceId) {
    try {
        String url = "http://document-service/api/documents/update-related-entities";
        HttpHeaders headers = new HttpHeaders();
        headers.add("Trace-Id", traceId);

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("documentUpdates", docUpdateData);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

        ResponseEntity<Void> response = restTemplate.exchange(
            url,
            HttpMethod.POST,
            request,
            Void.class);

        return response.getStatusCode().is2xxSuccessful();
    } catch (Exception e) {
        log.error("Error calling Document API: {}", e.getMessage());
        return false;
    }
}






import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.util.*;

public class RelatedEntityAdditionServiceTest {

    @InjectMocks
    private RelatedEntityAdditionService relatedEntityAdditionService;

    @Mock
    private GetAllDocumentsService getAllDocumentsService;

    @Mock
    private RelatedEntityNuxeoHandler relatedEntityNuxeoHandler;

    @Mock
    private DossierMetadataService dossierMetadataService;

    @Mock
    private RestTemplate restTemplate;

    private String dossierId;
    private String consumerId;
    private String traceId;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        dossierId = "12345";
        consumerId = "consumer1";
        traceId = "trace123";
    }

    @Test
    public void testAddRelatedEntitiesToDossier_NoExistingEntities_AddAll() throws Exception {
        // Arrange
        when(getAllDocumentsService.getAllDocuments(consumerId, dossierId, traceId))
                .thenReturn(new AllDocumentsResponse(Collections.emptyList()));
        when(relatedEntityNuxeoHandler.readRelatedEntityInfo(any())).thenReturn(Collections.emptyList());

        List<RelatedEntity> incomingRelatedEntities = List.of(
                new RelatedEntity("1", "admin1", "TYPE1"),
                new RelatedEntity("2", "admin2", "TYPE2")
        );

        ResponseEntity<Void> mockResponse = new ResponseEntity<>(HttpStatus.OK);
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(), eq(Void.class)))
                .thenReturn(mockResponse);

        // Act
        relatedEntityAdditionService.addRelatedEntitiesToDossier(dossierId, consumerId, traceId, incomingRelatedEntities);

        // Assert
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), any(), eq(Void.class));
        // Verify additional calls if needed
    }

    @Test
    public void testAddRelatedEntitiesToDossier_WithExistingEntities_AddOnlyNew() throws Exception {
        // Arrange
        DocumentInDossier document = new DocumentInDossier("doc1", List.of(
                new RelatedEntity("1", "admin1", "TYPE1")
        ));
        when(getAllDocumentsService.getAllDocuments(consumerId, dossierId, traceId))
                .thenReturn(new AllDocumentsResponse(List.of(document)));
        when(relatedEntityNuxeoHandler.readRelatedEntityInfo(any()))
                .thenReturn(Collections.emptyList());

        List<RelatedEntity> incomingRelatedEntities = List.of(
                new RelatedEntity("1", "admin1", "TYPE1"), // Duplicate
                new RelatedEntity("2", "admin2", "TYPE2")  // New
        );

        ResponseEntity<Void> mockResponse = new ResponseEntity<>(HttpStatus.OK);
        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(), eq(Void.class)))
                .thenReturn(mockResponse);

        // Act
        relatedEntityAdditionService.addRelatedEntitiesToDossier(dossierId, consumerId, traceId, incomingRelatedEntities);

        // Assert
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), any(), eq(Void.class));
    }

    @Test
    public void testAddRelatedEntitiesToDossier_DocumentApiFailure_ThrowsException() {
        // Arrange
        DocumentInDossier document = new DocumentInDossier("doc1", List.of(
                new RelatedEntity("1", "admin1", "TYPE1")
        ));
        when(getAllDocumentsService.getAllDocuments(consumerId, dossierId, traceId))
                .thenReturn(new AllDocumentsResponse(List.of(document)));
        when(relatedEntityNuxeoHandler.readRelatedEntityInfo(any()))
                .thenReturn(Collections.emptyList());

        List<RelatedEntity> incomingRelatedEntities = List.of(
                new RelatedEntity("2", "admin2", "TYPE2")
        );

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(), eq(Void.class)))
                .thenThrow(new RuntimeException("Document API failure"));

        // Act & Assert
        Exception exception = assertThrows(Exception.class, () ->
                relatedEntityAdditionService.addRelatedEntitiesToDossier(dossierId, consumerId, traceId, incomingRelatedEntities));
        assertEquals("Failed to update related entities in some documents. Operation aborted.", exception.getMessage());
    }

    @Test
    public void testAddRelatedEntitiesToDossier_NoNewEntities_SkipUpdate() throws Exception {
        // Arrange
        DocumentInDossier document = new DocumentInDossier("doc1", List.of(
                new RelatedEntity("1", "admin1", "TYPE1")
        ));
        when(getAllDocumentsService.getAllDocuments(consumerId, dossierId, traceId))
                .thenReturn(new AllDocumentsResponse(List.of(document)));
        when(relatedEntityNuxeoHandler.readRelatedEntityInfo(any()))
                .thenReturn(Collections.emptyList());

        List<RelatedEntity> incomingRelatedEntities = List.of(
                new RelatedEntity("1", "admin1", "TYPE1") // Duplicate
        );

        // Act
        relatedEntityAdditionService.addRelatedEntitiesToDossier(dossierId, consumerId, traceId, incomingRelatedEntities);

        // Assert
        verify(restTemplate, never()).exchange(anyString(), eq(HttpMethod.POST), any(), eq(Void.class));
        log.info("No new entities to add. Skipped document API call.");
    }
}
